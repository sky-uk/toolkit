// =============================================================================
// TEST / FUNCTIONAL / TOOLS / GRADIENTS
// =============================================================================

$test-module-area: "Tools / Gradients /";

// Functions (Private / Framework Only)
// ==============================================

// $_gradient-color-stops()
// ------------------------------------

@include test-module("#{$test-module-area} @function _gradient-color-stops") {
  @include test("should return correct color points with given key") {
    $actual: _gradient-color-stops(sky-1);
    $expected: null, #0080df 0%, #079ef8 100%; // Unknown bug in tests prepending `null`

    @include assert-equal($actual, $expected);
  }

  @include test("should return correct color points with given key when inverted") {
    $actual: _gradient-color-stops(sky-1, reverse);
    $expected: null, #079ef8 0%, #0080df 100%; // Unknown bug in tests prepending `null`

    @include assert-equal($actual, $expected);
  }
}

// $_gradient-fallback()
// ------------------------------------

@include test-module("#{$test-module-area} @function _gradient-fallback") {
  @include test("should return correct fallback when no value set") {
    $actual: _gradient-fallback(sky-1);
    $expected: #079ef8;

    @include assert-equal($actual, $expected);
  }

  @include test("should return correct fallback when color set") {
    $actual: _gradient-fallback(sky-1, color(brand));
    $expected: #0073c5;

    @include assert-equal($actual, $expected);
  }
}

// Functions
// ===========================================

// $gradient-color()
// ------------------------------------

@include test-module("#{$test-module-area} @function gradient-color") {
  @include test("should return a start hex value for given key.") {
    $actual: gradient-color("sky-1", 0%);
    $expected: #0080df;

    @include assert-equal($actual, $expected);
  }

  @include test("should return an end hex value for given key.") {
    $actual: gradient-color("sky-1", 100%);
    $expected: #079ef8;

    @include assert-equal($actual, $expected);
  }

  @include test("should return an end hex if no variant is provided.") {
    $actual: gradient-color("sky-1");
    $expected: #079ef8;

    @include assert-equal($actual, $expected);
  }
}

// Mixins
// ===========================================

// @include gradient-background()
// ------------------------------------

@include test-module("#{$test-module-area} @mixin gradient-background") {
  @include test("should return a vertical linear gradient for the given key when no direction is set") {
    @include assert("compiles vertical linear gradient") {
      @include input() {
        @include gradient-background(sky-1);
      }

      @include expect() {
        background-color: #079ef8;
        background-image: -webkit-linear-gradient(top, #0080df 0%, #079ef8 100%);
        background-image: -moz-linear-gradient(top, #0080df 0%, #079ef8 100%);
        background-image: -o-linear-gradient(top, #0080df 0%, #079ef8 100%);
        background-image: linear-gradient(to bottom, #0080df 0%, #079ef8 100%);
      }
    }
  }

  @include test("should return a vertical linear gradient for the given key when a vertical direction is set") {
    @include assert("compiles vertical linear gradient") {
      @include input() {
        @include gradient-background(sky-1, "vertical");
      }

      @include expect() {
        background-color: #079ef8;
        background-image: -webkit-linear-gradient(top, #0080df 0%, #079ef8 100%);
        background-image: -moz-linear-gradient(top, #0080df 0%, #079ef8 100%);
        background-image: -o-linear-gradient(top, #0080df 0%, #079ef8 100%);
        background-image: linear-gradient(to bottom, #0080df 0%, #079ef8 100%);
      }
    }
  }

  @include test("should return a radial gradient for the given key when a radial direction is set") {
    @include assert("compiles radial linear gradient") {
      @include input() {
        @include gradient-background(sky-1, "radial");
      }

      @include expect() {
        background-color: #079ef8;
        background-image: -webkit-radial-gradient(center, ellipse cover, #079ef8 0%, #0080df 100%);
        background-image: -moz-radial-gradient(center, ellipse cover, #079ef8 0%, #0080df 100%);
        background-image: -o-radial-gradient(center, ellipse cover, #079ef8 0%, #0080df 100%);
        background-image: radial-gradient(ellipse at center, #079ef8 0%, #0080df 100%);
      }
    }
  }

  @include test("should return the correct fallback color if set") {
    @include assert("compiles vertical linear gradient") {
      @include input() {
        @include gradient-background(sky-1, "vertical", color(grey-50));
      }

      @include expect() {
        background-color: #222;
        background-image: -webkit-linear-gradient(top, #0080df 0%, #079ef8 100%);
        background-image: -moz-linear-gradient(top, #0080df 0%, #079ef8 100%);
        background-image: -o-linear-gradient(top, #0080df 0%, #079ef8 100%);
        background-image: linear-gradient(to bottom, #0080df 0%, #079ef8 100%);
      }
    }
  }
}

// @include gradient-text()
// ------------------------------------

@include test-module("#{$test-module-area} @mixin gradient-text") {
  @include test("with key and direction") {
    @include assert("sets correct values") {
      @include input() {
        @include gradient-text(sky-1, horizontal);
      }

      @include expect() {
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        -webkit-transform: translate3d(0, 0, 0);
        display: inline-block;
        color: #079ef8;
        background-image: -webkit-linear-gradient(left, #0080df 0%, #079ef8 100%);
        background-size: 100%;
      }
    }
  }

  @include test("with key, direction and fallback") {
    @include assert("sets correct values") {
      @include input() {
        @include gradient-text(sky-1, radial, color(brand));
      }

      @include expect() {
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        -webkit-transform: translate3d(0, 0, 0);
        display: inline-block;
        color: #0073c5;
        background-image: -webkit-radial-gradient(center, ellipse cover, #079ef8 0%, #0080df 100%);
        background-size: 100%;
      }
    }
  }
}
