// =============================================================================
// TEST / FUNCTIONAL / TOOLS / MIXINS
// =============================================================================

$test-module-area: "Tools / Mixins /";

// @include add-color
// ==============================================

@include test-module("#{$test-module-area} @mixin add-color") {
  @include test("should add new key and value to color map") {
    @include assert("merges color map with new values") {
      @include input() {
        @include add-color(testkey, #bada55);
        color: map-get($colors, white);
        background: map-get($colors, black);
        border-color: map-get($colors, testkey);
      }

      @include expect() {
        color: #fff;
        background: #000;
        border-color: #bada55;
      }
    }
  }
}

// @include responsivize
// ==============================================

@include test-module("#{$test-module-area} @mixin responsivize") {
  @include test("when no argument given to responisivize mixin - should generate classes for each breakpoint in the $mq-breakpoints map and one non-specific class") {
    @include assert("should generate classes for each breakpoint in the $mq-breakpoints map and one non-specific class") {
      @include input() {
        .foo {
          @include responsivize() {
            color: red;
          }
        }
      }

      @include expect() {
        .foo {
          color: red;
        }

        @media (min-width: 420px) {
          .foo\@small {
            color: red;
          }
        }

        @media (min-width: 740px) {
          .foo\@medium {
            color: red;
          }
        }

        @media (min-width: 980px) {
          .foo\@large {
            color: red;
          }
        }

        @media (min-width: 1300px) {
          .foo\@x-large {
            color: red;
          }
        }
      }
    }
  }

  @include test("when a list of arguments are provided to the responsivize mixin - should generate classes for each item in the argument list that matches map keys in the $mq-breakpoints map and one none specific class") {
    @include assert("should generate classes for each item in the argument list that matches map keys in the $mq-breakpoints map and one none specific class") {
      @include input() {
        .foo {
          @include responsivize(small medium) {
            color: red;
          }
        }
      }

      @include expect() {
        .foo {
          color: red;
        }

        @media (min-width: 420px) {
          .foo\@small {
            color: red;
          }
        }

        @media (min-width: 740px) {
          .foo\@medium {
            color: red;
          }
        }
      }
    }
  }
}

// @include edge-position
// ==============================================

@include test-module("#{$test-module-area} @mixin edge-position") {
  @include test("when no arguments are given to the edge-position mixin") {
    @include assert("should offest all positions by zero ") {
      @include input() {
        .foo {
          @include edge-position();

        }
      }

      @include expect() {
        .foo {
          top: 0;
          right: 0;
          bottom: 0;
          left: 0;
        }
      }
    }
  }

  @include test("when an argument is given to the edge-position mixin") {
    @include assert("should offest all positions by the value ") {
      @include input() {
        .foo {
          @include edge-position(5px);

        }
      }

      @include expect() {
        .foo {
          top: 5px;
          right: 5px;
          bottom: 5px;
          left: 5px;
        }
      }
    }
  }
}

// @include height-sizing
// ==============================================

@include test-module("#{$test-module-area} @mixin height-sizing") {
  @include test("should return fixed height sizing by default") {
    @include assert("outputs default fixed height/line-height sizing") {
      @include input() {
        .foo {
          @include height-sizing();
        }
      }

      @include expect() {
        .foo {
          padding-top: 0;
          padding-bottom: 0;
          height: 2.222222222em;
          line-height: 2.222222222em;
        }
      }
    }
  }

  @include test("should return fixed height sizing when defined") {
    @include assert("outputs default fixed height/line-height sizing") {
      @include input() {
        .foo {
          @include height-sizing(fixed);
        }
      }

      @include expect() {
        .foo {
          padding-top: 0;
          padding-bottom: 0;
          height: 2.222222222em;
          line-height: 2.222222222em;
        }
      }
    }
  }

  @include test("should return padding-based height-sizing when defined") {
    @include assert("outputs default padding-based sizing and line-height") {
      @include input() {
        .foo {
          @include height-sizing(padding);
        }
      }

      @include expect() {
        .foo {
          padding-top: 6px;
          padding-bottom: 6px;
          line-height: 26px;
        }
      }
    }
  }

  @include test("should return custom padding-based height-sizing when defined") {
    @include assert("outputs custom padding-based sizing and line-height") {
      @include input() {
        .foo {
          @include height-sizing(padding, 18px);
        }
      }

      @include expect() {
        .foo {
          padding-top: 10px;
          padding-bottom: 10px;
          line-height: 18px;
        }
      }
    }
  }
}
