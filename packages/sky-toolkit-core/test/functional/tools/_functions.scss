// =============================================================================
// TEST / FUNCTIONAL / TOOLS / FUNCTIONS
// =============================================================================

$test-module-area: "Tools / Functions /";

// Maps
// ==============================================

// map-get-deep()
// ------------------------------------

@include test-module("#{$test-module-area} @function map-get-deep") {
  @include test("should return a value for a given map and key.") {
    $actual: map-get-deep($colors, white);
    $expected: #fff;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a nested value for a given map and 2 keys.") {
    $actual: map-get-deep($gradients, default, 0%);
    $expected: #f2f2f5;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a deeper nested value for a given map and 3 keys.") {
    $actual: map-get-deep($text, text-body, large, font-size);
    $expected: 18px;

    @include assert-equal($actual, $expected);
  }
}

// map-has-keys-deep()
// ------------------------------------

@include test-module("#{$test-module-area} @function map-has-keys-deep") {
  @include test("should return true if a given key exists for a given map.") {
    $actual: map-has-keys-deep($colors, white);
    $expected: true;

    @include assert-equal($actual, $expected);
  }

  @include test("should return true if 2 given keys exist for a given map.") {
    $actual: map-has-keys-deep($gradients, default, 0%);
    $expected: true;

    @include assert-equal($actual, $expected);
  }

  @include test("should return true if 3 given keys exist for a given map.") {
    $actual: map-has-keys-deep($text, text-body, large, font-size);
    $expected: true;

    @include assert-equal($actual, $expected);
  }
}

// Map Shorcuts
// ==============================================

// color()
// ------------------------------------

@include test-module("#{$test-module-area} @function color") {
  @include test("should return a hex value for given key.") {
    $actual: color(white);
    $expected: #fff;

    @include assert-equal($actual, $expected);
  }
}

// z-index()
// ------------------------------------

@include test-module("#{$test-module-area} @function z-index") {
  @include test("should return a value for given key.") {
    $actual: z-index(1);
    $expected: 10;

    @include assert-equal($actual, $expected);
  }
}

// Conversion
// ==============================================

// convert-to-em()
// ------------------------------------

@include test-module("#{$test-module-area} @function convert-to-em") {
  @include test("should return an em value when pixels are supplied.") {
    $actual: convert-to-em(27px);
    $expected: 1.5em;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a number with no units when a number with no units is supplied.") {
    $actual: convert-to-em(2rem);
    $expected: 2em;

    @include assert-equal($actual, $expected);
  }

  @include test("should return the correct value when different base font size is set.") {
    $actual: convert-to-em(20px, 10px);
    $expected: 2em;

    @include assert-equal($actual, $expected);
  }
}

// reverse()
// ------------------------------------

@include test-module("#{$test-module-area} @function reverse") {
  @include test("should return a reversed list.") {
    $list: 1, 2, 3, 4;
    $actual: reverse($list);
    $expected: 4, 3, 2, 1;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a reversed map.") {

    $actual: reverse(map-get($gradients, sky-1));
    $expected: (100% #079ef8), (0% #0080df);

    @include assert-equal($actual, $expected);
  }
}

// strip-unit()
// ------------------------------------

@include test-module("#{$test-module-area} @function strip-unit") {
  @include test("should return a number with no units when a number with units is supplied.") {
    $actual: strip-unit(20vw);
    $expected: 20;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a number with no units when a number with no units is supplied.") {
    $actual: strip-unit(400);
    $expected: 400;

    @include assert-equal($actual, $expected);
  }
}
